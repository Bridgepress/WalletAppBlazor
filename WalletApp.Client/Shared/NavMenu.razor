@using Blazored.LocalStorage
@using WalletApp.Client.DTO.AppUser
@using WalletApp.Client.HttpRepositories
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager nav
@inject IJSRuntime JS
<style>

</style>
<nav class="navbar navbar-expand-lg navbar-custom navbar-dark bg-dark position-relative">
      <div class="container-fluid">
        <a class="navbar-brand" href="\" style='color:@NavItems["Home"]' @onclick='()=>ActiveLink("Home")'>Home</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav">
            <li class="nav-item">
                    <a class="nav-link" href="\GetCosts" style='color:@NavItems["Costs"]' @onclick='()=>ActiveLink("Costs")'>Costs</a>
            </li>
            <li class="nav-item">
                    <a class="nav-link" href="\GetIncome" style='color:@NavItems["Income"]' @onclick='()=>ActiveLink("Income")'>Income</a>
            </li>
        </ul>
        <AuthorizeView>
            <Authorized>
                    <button @onclick="Logout" class="btn btn-danger d-flex position-absolute end-0 m-2">Logout</button>
            </Authorized>
            <NotAuthorized>
                    <form class="d-flex position-absolute end-0 m-2" @onsubmit="HandleValidSubmit">
                        <input @bind="Login.Name"
                               class="form-control mr-sm-2 m-1"
                               type="text"
                               placeholder="Username">
                        <input @bind="Login.Password"
                               class="form-control mr-sm-2 m-1"
                               type="password"
                               placeholder="Password">
                        <button class="btn btn-success mr-sm-2 m-1" type="submit">Login</button>
                </form>
            </NotAuthorized>
        </AuthorizeView>
    </div>
    </div>
</nav>

@code {
    [Parameter]
    public Guid Id { get; set; }
    public LoginDTO Login { get; set; } = new LoginDTO();
    string userdata = string.Empty;
    [Inject]
    public IAppUserRepository UserRepository { get; set; } = default!;
    public string WhiteColor = "#FFFFFF";
    public Dictionary<string, string> NavItems { get; set; } = new Dictionary<string, string>();
    public string ActiveColor = "#49c5b6";

    protected override async Task OnInitializedAsync()
    {
        NavItems.Add("Home", ActiveColor);
        NavItems.Add("Costs", WhiteColor);
        NavItems.Add("Income", WhiteColor);
        ActiveLink("Home");
    }

    private async Task HandleValidSubmit()
    {
        UserDTO? result = await UserRepository.loginUser(Login);
        if(result is not null){
            await JS.InvokeVoidAsync(
            "actionToastHandler",
            "bg-success",
            $"Hello");
            nav.NavigateTo("/");
        }
        else{
            await JS.InvokeVoidAsync(
            "actionToastHandler",
            "bg-danger",
            $"Incorrect login or password!");
        }
    }

    public void ActiveLink(string name)
    {
        foreach (var item in NavItems)
        {
            if(item.Key == name)
            {
                NavItems[item.Key] = ActiveColor;
            }
            else
            {
                NavItems[item.Key] = WhiteColor;
            }
        }
    }

    async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("token");
        (AuthStateProvider as IdentityAuthenticationStateProvider).MarkUserAsLoggedOut();
        await UserRepository.Logout();
    }
}
